// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using OAK.DataBase;

namespace OAK.WebApi.Migrations
{
    [DbContext(typeof(DbContextDefault))]
    [Migration("20201010002232_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("OAK.Model.BusinessModels.AddressModels.GenericAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("CountryId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("GenericAddressTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("HouseNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PlaceName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PostCode")
                        .IsRequired()
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Town")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("GenericAddressTypeId");

                    b.ToTable("GenericAddresses");
                });

            modelBuilder.Entity("OAK.Model.BusinessModels.AddressModels.GenericAddressType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LocalKey")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<int?>("PropertyJsonId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LocalKey");

                    b.HasIndex("PropertyJsonId");

                    b.ToTable("GenericAddressTypes");
                });

            modelBuilder.Entity("OAK.Model.BusinessModels.CommentModels.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("AccountId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CommentDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CommentDislike")
                        .HasColumnType("integer");

                    b.Property<int>("CommentLike")
                        .HasColumnType("integer");

                    b.Property<string>("CommentNote")
                        .HasColumnType("text");

                    b.Property<int>("CommentScore")
                        .HasColumnType("integer");

                    b.Property<int>("CommentStatusTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("CommentTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("CommentUsefull")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("ParentCommentId")
                        .HasColumnType("integer");

                    b.Property<int?>("PropertyJsonId")
                        .HasColumnType("integer");

                    b.Property<int>("PropertyValues")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("PropertyJsonId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("OAK.Model.BusinessModels.CommentModels.CommentStatusType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("LocalKey")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LocalKey");

                    b.ToTable("CommentStatusTypes");
                });

            modelBuilder.Entity("OAK.Model.BusinessModels.CommentModels.CommentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("LocalKey")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("PropertyJsonId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LocalKey");

                    b.HasIndex("PropertyJsonId");

                    b.ToTable("CommentTypes");
                });

            modelBuilder.Entity("OAK.Model.BusinessModels.CompanyModels.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AccountId")
                        .HasColumnType("integer");

                    b.Property<int>("CompanyStatusTypeId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("GenericAddressId")
                        .HasColumnType("integer");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TaxNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompanyStatusTypeId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("OAK.Model.BusinessModels.CompanyModels.CompanyDemandService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DemandId")
                        .HasColumnType("integer");

                    b.Property<int>("DemandStatusTypeId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("OfferAmount")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("DemandId");

                    b.ToTable("CompanyDemandServices");
                });

            modelBuilder.Entity("OAK.Model.BusinessModels.CompanyModels.CompanyOfficialDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DocumentId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("DocumentId");

                    b.ToTable("CompanyOfficialDocuments");
                });

            modelBuilder.Entity("OAK.Model.BusinessModels.CompanyModels.CompanyPublicDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DocumentId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("DocumentId");

                    b.ToTable("CompanyPublicDocuments");
                });

            modelBuilder.Entity("OAK.Model.BusinessModels.CompanyModels.CompanyStatusType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("LocalKey")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LocalKey");

                    b.ToTable("CompanyStatusTypes");
                });

            modelBuilder.Entity("OAK.Model.BusinessModels.CustomerType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("LocalKey")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("LocalKey");

                    b.ToTable("CustomerType");
                });

            modelBuilder.Entity("OAK.Model.BusinessModels.DemandModels.Demand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("AcceptedOfferId")
                        .HasColumnType("integer");

                    b.Property<int>("AccountId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("DemandAverageOfferedValue")
                        .HasColumnType("numeric");

                    b.Property<decimal>("DemandCommission")
                        .HasColumnType("numeric");

                    b.Property<decimal>("DemandContractValue")
                        .HasColumnType("numeric");

                    b.Property<decimal>("DemandEstimatedValue")
                        .HasColumnType("numeric");

                    b.Property<decimal>("DemandGrossValue")
                        .HasColumnType("numeric");

                    b.Property<decimal>("DemandMaxOfferedValue")
                        .HasColumnType("numeric");

                    b.Property<decimal>("DemandMinOfferedValue")
                        .HasColumnType("numeric");

                    b.Property<int>("DemandNumberOfOffers")
                        .HasColumnType("integer");

                    b.Property<int?>("DemandOwnerId")
                        .HasColumnType("integer");

                    b.Property<int>("DemandStatusTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("DemandTypeId")
                        .HasColumnType("integer");

                    b.Property<decimal>("DemandVAT")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PropertyValues")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("DemandStatusTypeId");

                    b.HasIndex("DemandTypeId");

                    b.ToTable("Demands");
                });

            modelBuilder.Entity("OAK.Model.BusinessModels.DemandModels.DemandChat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DemandId")
                        .HasColumnType("integer");

                    b.Property<int>("FromAccountId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ToAccountId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DemandId")
                        .IsUnique();

                    b.HasIndex("ToAccountId")
                        .IsUnique();

                    b.ToTable("DemandChats");
                });

            modelBuilder.Entity("OAK.Model.BusinessModels.DemandModels.DemandComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CommentDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CommentId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DemandId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("DemandId");

                    b.ToTable("DemandComments");
                });

            modelBuilder.Entity("OAK.Model.BusinessModels.DemandModels.DemandOwner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AlternativeCulture")
                        .HasColumnType("text");

                    b.Property<string>("CountryPhoneCode")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DemandId")
                        .HasColumnType("integer");

                    b.Property<string>("EMail")
                        .HasColumnType("text");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("PreferredCulture")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DemandId")
                        .IsUnique();

                    b.ToTable("DemandOwners");
                });

            modelBuilder.Entity("OAK.Model.BusinessModels.DemandModels.DemandStatusType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LocalKey")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LocalKey");

                    b.ToTable("DemandStatusTypes");
                });

            modelBuilder.Entity("OAK.Model.BusinessModels.DemandModels.DemandType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LocalKey")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("PropertyJsonId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LocalKey");

                    b.HasIndex("PropertyJsonId");

                    b.ToTable("DemandTypes");
                });

            modelBuilder.Entity("OAK.Model.BusinessModels.DocumentModels.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DocumentTypeId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PropertyValues")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("OAK.Model.BusinessModels.DocumentModels.DocumentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LocalKey")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("PropertyJsonId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LocalKey");

                    b.HasIndex("PropertyJsonId");

                    b.ToTable("DocumentTypes");
                });

            modelBuilder.Entity("OAK.Model.BusinessModels.EstateModels.EPartTypeFrnGrpType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("EstatePartTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("FurnitureGroupTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("SequenceNumber")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("EPartTypeFrnGrpTypes");
                });

            modelBuilder.Entity("OAK.Model.BusinessModels.EstateModels.Estate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CellarFloor")
                        .HasColumnType("integer");

                    b.Property<int>("CellarSqMt")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ElevatorAvailability")
                        .HasColumnType("integer");

                    b.Property<int>("EstateTypeId")
                        .HasColumnType("integer");

                    b.Property<bool>("FurnitureMontage")
                        .HasColumnType("boolean");

                    b.Property<int>("GardenGarageFloor")
                        .HasColumnType("integer");

                    b.Property<int>("GardenGarageSqMt")
                        .HasColumnType("integer");

                    b.Property<bool>("HasCellar")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasGardenGarage")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasLoft")
                        .HasColumnType("boolean");

                    b.Property<bool>("KitchenMontage")
                        .HasColumnType("boolean");

                    b.Property<int>("LoftFloor")
                        .HasColumnType("integer");

                    b.Property<int>("LoftSqMt")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("NumberOfFloors")
                        .HasColumnType("integer");

                    b.Property<int>("NumberOfRooms")
                        .HasColumnType("integer");

                    b.Property<bool>("PackingService")
                        .HasColumnType("boolean");

                    b.Property<string>("PropertyValues")
                        .HasColumnType("text");

                    b.Property<int>("TotalSquareMeter")
                        .HasColumnType("integer");

                    b.Property<bool>("WaitingPermission")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("EstateTypeId");

                    b.ToTable("Estates");
                });

            modelBuilder.Entity("OAK.Model.BusinessModels.EstateModels.EstatePart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("EstatePartFurnitureId")
                        .HasColumnType("integer");

                    b.Property<int>("EstatePartTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("EstatesFlatId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PropertyValues")
                        .HasColumnType("text");

                    b.Property<int?>("TargetFloor")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EstatePartFurnitureId");

                    b.HasIndex("EstatePartTypeId");

                    b.HasIndex("EstatesFlatId");

                    b.ToTable("EstateParts");
                });

            modelBuilder.Entity("OAK.Model.BusinessModels.EstateModels.EstatePartFurniture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("EstatePartId")
                        .HasColumnType("integer");

                    b.Property<int>("FurnitureId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("EstatePartFurnitures");
                });

            modelBuilder.Entity("OAK.Model.BusinessModels.EstateModels.EstatePartType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOuterPart")
                        .HasColumnType("boolean");

                    b.Property<string>("LocalKey")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("PropertyJsonId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LocalKey");

                    b.HasIndex("PropertyJsonId");

                    b.ToTable("EstatePartTypes");
                });

            modelBuilder.Entity("OAK.Model.BusinessModels.EstateModels.EstateType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LocalKey")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("PropertyJsonId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LocalKey");

                    b.HasIndex("PropertyJsonId");

                    b.ToTable("EstateTypes");
                });

            modelBuilder.Entity("OAK.Model.BusinessModels.EstateModels.EstateTypeEPartType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("EstatePartTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("EstateTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("SequenceNumber")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EstatePartTypeId");

                    b.HasIndex("EstateTypeId");

                    b.ToTable("EstateTypeEPartTypes");
                });

            modelBuilder.Entity("OAK.Model.BusinessModels.EstateModels.EstatesFlat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("EstateId")
                        .HasColumnType("integer");

                    b.Property<int>("FlatTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("FloorOfEstate")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("NumberOfRooms")
                        .HasColumnType("integer");

                    b.Property<int>("SqMtOfFloor")
                        .HasColumnType("integer");

                    b.Property<int?>("TargetFloor")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EstateId");

                    b.HasIndex("FlatTypeId");

                    b.ToTable("EstatesFlat");
                });

            modelBuilder.Entity("OAK.Model.BusinessModels.EstateModels.FlatType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LocalKey")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("PropertyJsonId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LocalKey");

                    b.HasIndex("PropertyJsonId");

                    b.ToTable("FlatTypes");
                });

            modelBuilder.Entity("OAK.Model.BusinessModels.EstateModels.Furniture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("DoAssemble")
                        .HasColumnType("boolean");

                    b.Property<int>("EstatePartId")
                        .HasColumnType("integer");

                    b.Property<int>("FurnitureTypeId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("NumberOfFurnitures")
                        .HasColumnType("integer");

                    b.Property<string>("PropertyValues")
                        .HasColumnType("text");

                    b.Property<int?>("TargetFloor")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EstatePartId");

                    b.ToTable("Furnitures");
                });

            modelBuilder.Entity("OAK.Model.BusinessModels.EstateModels.FurnitureCalculationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("LocalKey")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("LocalKey");

                    b.ToTable("FurnitureCalculationTypes");
                });

            modelBuilder.Entity("OAK.Model.BusinessModels.EstateModels.FurnitureGroupType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LocalKey")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("LocalKey");

                    b.ToTable("FurnitureGroupTypes");
                });

            modelBuilder.Entity("OAK.Model.BusinessModels.EstateModels.FurnitureType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("Assemblable")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("AssembleCost")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<decimal?>("DisassembleCost")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("FlatRate")
                        .HasColumnType("numeric");

                    b.Property<int>("FurnitureCalculationTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("FurnitureGroupTypeId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LocalKey")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("PropertyJsonId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Volume")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("FurnitureCalculationTypeId");

                    b.HasIndex("FurnitureGroupTypeId");

                    b.HasIndex("LocalKey");

                    b.HasIndex("PropertyJsonId");

                    b.ToTable("FurnitureTypes");
                });

            modelBuilder.Entity("OAK.Model.BusinessModels.ParameterModels.CurrencyParameters", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CurrencyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CurrencyShortCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CurrencySymbol")
                        .HasColumnType("text");

                    b.Property<decimal>("DailyRoomRate")
                        .HasColumnType("numeric");

                    b.Property<decimal>("DriverHourRate")
                        .HasColumnType("numeric");

                    b.Property<decimal>("LKWDailyRentPrice")
                        .HasColumnType("numeric");

                    b.Property<string>("LocalKey")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("LocalizationKeyKey")
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("OilPrice")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PricePerKilometer")
                        .HasColumnType("numeric");

                    b.Property<int>("PropertyJsonId")
                        .HasColumnType("integer");

                    b.Property<decimal>("SprinterDailyRentPrice")
                        .HasColumnType("numeric");

                    b.Property<decimal>("WorkerHourRate")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("LocalizationKeyKey");

                    b.HasIndex("PropertyJsonId");

                    b.ToTable("CurrencyParameters");
                });

            modelBuilder.Entity("OAK.Model.BusinessModels.ParameterModels.Parameters", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("LKWAvgOilConsumption")
                        .HasColumnType("numeric");

                    b.Property<decimal>("LKWAvgVelocity")
                        .HasColumnType("numeric");

                    b.Property<decimal>("LKWDailyKM")
                        .HasColumnType("numeric");

                    b.Property<decimal>("LKWMaxVolume")
                        .HasColumnType("numeric");

                    b.Property<string>("LocalKey")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("LocalizationKeyKey")
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PropertyJsonId")
                        .HasColumnType("integer");

                    b.Property<decimal>("SprinterAvgOilConsumption")
                        .HasColumnType("numeric");

                    b.Property<decimal>("SprinterAvgVelocity")
                        .HasColumnType("numeric");

                    b.Property<decimal>("SprinterDailyKM")
                        .HasColumnType("numeric");

                    b.Property<decimal>("SprinterMaxVolume")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("LocalizationKeyKey");

                    b.HasIndex("PropertyJsonId");

                    b.ToTable("Parameters");
                });

            modelBuilder.Entity("OAK.Model.BusinessModels.TransportationModels.Transportation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("DateFlexibility")
                        .HasColumnType("boolean");

                    b.Property<int>("DemandId")
                        .HasColumnType("integer");

                    b.Property<string>("ExtraInfo")
                        .HasColumnType("text");

                    b.Property<int?>("ExtraInfoLanguageId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("FinalTransportationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("FromAddressId")
                        .HasColumnType("integer");

                    b.Property<int>("FromEstateId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("InitialTransportationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsFixedPrice")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("NumberOfPeople")
                        .HasColumnType("integer");

                    b.Property<string>("PropertyJsonValues")
                        .HasColumnType("text");

                    b.Property<int>("ToAddressId")
                        .HasColumnType("integer");

                    b.Property<int>("ToEstateId")
                        .HasColumnType("integer");

                    b.Property<int>("TransportationAverageOfferedValue")
                        .HasColumnType("integer");

                    b.Property<decimal>("TransportationCommission")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TransportationContractValue")
                        .HasColumnType("numeric");

                    b.Property<int>("TransportationDistanceMax")
                        .HasColumnType("integer");

                    b.Property<int>("TransportationDistanceMin")
                        .HasColumnType("integer");

                    b.Property<int>("TransportationEstimatedValue")
                        .HasColumnType("integer");

                    b.Property<decimal>("TransportationGrossValue")
                        .HasColumnType("numeric");

                    b.Property<int>("TransportationMaxOfferedValue")
                        .HasColumnType("integer");

                    b.Property<int>("TransportationMinOfferedValue")
                        .HasColumnType("integer");

                    b.Property<int>("TransportationNumberOfOffers")
                        .HasColumnType("integer");

                    b.Property<int>("TransportationStatusTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("TransportationTypeId")
                        .HasColumnType("integer");

                    b.Property<decimal>("TransportationVAT")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("DemandId");

                    b.HasIndex("FromAddressId");

                    b.HasIndex("FromEstateId");

                    b.HasIndex("ToAddressId");

                    b.HasIndex("ToEstateId");

                    b.ToTable("Transportations");
                });

            modelBuilder.Entity("OAK.Model.BusinessModels.TransportationModels.TransportationComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CommentDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CommentId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("DemandId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("TransportationDemandId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("DemandId");

                    b.ToTable("TransportationComments");
                });

            modelBuilder.Entity("OAK.Model.BusinessModels.TransportationModels.TransportationDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DocumentId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("TransportationId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.HasIndex("TransportationId");

                    b.ToTable("TransportationDocuments");
                });

            modelBuilder.Entity("OAK.Model.BusinessModels.TransportationModels.TransportationStatusType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LocalKey")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("LocalizationKeyKey")
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LocalizationKeyKey");

                    b.ToTable("TransportationStatusTypes");
                });

            modelBuilder.Entity("OAK.Model.BusinessModels.TransportationModels.TransportationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LocalKey")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("LocalizationKeyKey")
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("PropertyJsonId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LocalizationKeyKey");

                    b.HasIndex("PropertyJsonId");

                    b.ToTable("TransportationTypes");
                });

            modelBuilder.Entity("OAK.Model.Core.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ActivationCode")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("CustomerTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("EmailActivationDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("FcmToken")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCompanyOwner")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsEmailActivated")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("LastPasswordChangeDate")
                        .HasColumnType("timestamp");

                    b.Property<int>("LoginAttempts")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Modified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("TempVerificationString")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorAuthenticationEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.Property<DateTime?>("VerificationValidityTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CustomerTypeId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("PhoneNumber");

                    b.HasIndex("TempVerificationString")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Account");
                });

            modelBuilder.Entity("OAK.Model.Core.AccountRole", b =>
                {
                    b.Property<int>("AccountId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("Modified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("AccountId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AccountRole");
                });

            modelBuilder.Entity("OAK.Model.Core.CompanyPostCodeData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<int>("CountryId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("Modified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("PostCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CountryId");

                    b.ToTable("CompanyPostCodeData");
                });

            modelBuilder.Entity("OAK.Model.Core.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AreaCodes")
                        .HasColumnType("text");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<int>("CountryCodeLength")
                        .HasColumnType("integer")
                        .HasMaxLength(10);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CultureName")
                        .IsRequired()
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("IsoCode2")
                        .IsRequired()
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("IsoCode3")
                        .IsRequired()
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("LocalKey")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.Property<int>("PhoneAreaCodeMaxLength")
                        .HasColumnType("integer");

                    b.Property<int>("PhoneAreaCodeMinLength")
                        .HasColumnType("integer");

                    b.Property<int>("PhoneSubscriberNumberLengthMax")
                        .HasColumnType("integer");

                    b.Property<int>("PhoneSubscriberNumberLengthMin")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LocalKey");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("OAK.Model.Core.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CultureName")
                        .IsRequired()
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LocalKey")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("LocalizationKeyKey")
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("LocalizationKeyKey");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("OAK.Model.Core.PostCodeData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Accuracy")
                        .HasColumnType("integer");

                    b.Property<string>("AdminCode1")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("AdminCode2")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("AdminCode3")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("AdminName1")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("AdminName2")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("AdminName3")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("IsoCountryCode")
                        .IsRequired()
                        .HasColumnType("character(2)")
                        .IsFixedLength(true)
                        .HasMaxLength(2);

                    b.Property<double>("Lattitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PlaceName")
                        .IsRequired()
                        .HasColumnType("character varying(180)")
                        .HasMaxLength(180);

                    b.Property<string>("PostCode")
                        .IsRequired()
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.HasIndex("IsoCountryCode");

                    b.ToTable("PostCodeData");
                });

            modelBuilder.Entity("OAK.Model.Core.PropertyJson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("JsonObject")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PropertyJson");
                });

            modelBuilder.Entity("OAK.Model.Core.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("Description")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<string>("LocalKey")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.HasIndex("LocalKey");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("OAK.Model.Core.SupportedPostCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CountryId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PostCode")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("SupportedPostCodes");
                });

            modelBuilder.Entity("OAK.Model.Localization.LocalizationKey", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.HasKey("Key");

                    b.ToTable("LocalizationKey");
                });

            modelBuilder.Entity("OAK.Model.Localization.LocalizationText", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CultureName")
                        .IsRequired()
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("LanguageId")
                        .HasColumnType("integer");

                    b.Property<string>("LocalKey")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasAlternateKey("LanguageId", "LocalKey");

                    b.HasIndex("LocalKey");

                    b.ToTable("LocalizationText");
                });

            modelBuilder.Entity("OAK.Model.BusinessModels.AddressModels.GenericAddress", b =>
                {
                    b.HasOne("OAK.Model.Core.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("OAK.Model.BusinessModels.AddressModels.GenericAddressType", "GenericAddressType")
                        .WithMany("GenericAddresses")
                        .HasForeignKey("GenericAddressTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OAK.Model.BusinessModels.AddressModels.GenericAddressType", b =>
                {
                    b.HasOne("OAK.Model.Localization.LocalizationKey", "LocalizationKey")
                        .WithMany()
                        .HasForeignKey("LocalKey")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OAK.Model.Core.PropertyJson", "PropertyJson")
                        .WithMany("GenericAddressTypes")
                        .HasForeignKey("PropertyJsonId");
                });

            modelBuilder.Entity("OAK.Model.BusinessModels.CommentModels.Comment", b =>
                {
                    b.HasOne("OAK.Model.Core.Account", "Account")
                        .WithMany("Comments")
                        .HasForeignKey("AccountId");

                    b.HasOne("OAK.Model.Core.PropertyJson", "PropertyJson")
                        .WithMany()
                        .HasForeignKey("PropertyJsonId");
                });

            modelBuilder.Entity("OAK.Model.BusinessModels.CommentModels.CommentStatusType", b =>
                {
                    b.HasOne("OAK.Model.Localization.LocalizationKey", "LocalizationKey")
                        .WithMany()
                        .HasForeignKey("LocalKey")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("OAK.Model.BusinessModels.CommentModels.CommentType", b =>
                {
                    b.HasOne("OAK.Model.Localization.LocalizationKey", "LocalizationKey")
                        .WithMany()
                        .HasForeignKey("LocalKey")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OAK.Model.Core.PropertyJson", "PropertyJson")
                        .WithMany("CommentTypes")
                        .HasForeignKey("PropertyJsonId");
                });

            modelBuilder.Entity("OAK.Model.BusinessModels.CompanyModels.Company", b =>
                {
                    b.HasOne("OAK.Model.BusinessModels.CompanyModels.CompanyStatusType", "CompanyStatusType")
                        .WithMany("Companies")
                        .HasForeignKey("CompanyStatusTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OAK.Model.BusinessModels.CompanyModels.CompanyDemandService", b =>
                {
                    b.HasOne("OAK.Model.BusinessModels.CompanyModels.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OAK.Model.BusinessModels.DemandModels.Demand", "Demand")
                        .WithMany("CompanyDemandServices")
                        .HasForeignKey("DemandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OAK.Model.BusinessModels.CompanyModels.CompanyOfficialDocument", b =>
                {
                    b.HasOne("OAK.Model.BusinessModels.CompanyModels.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OAK.Model.BusinessModels.DocumentModels.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OAK.Model.BusinessModels.CompanyModels.CompanyPublicDocument", b =>
                {
                    b.HasOne("OAK.Model.BusinessModels.CompanyModels.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OAK.Model.BusinessModels.DocumentModels.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OAK.Model.BusinessModels.CompanyModels.CompanyStatusType", b =>
                {
                    b.HasOne("OAK.Model.Localization.LocalizationKey", "LocalizationKey")
                        .WithMany()
                        .HasForeignKey("LocalKey")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("OAK.Model.BusinessModels.CustomerType", b =>
                {
                    b.HasOne("OAK.Model.Localization.LocalizationKey", "LocalizationKey")
                        .WithMany()
                        .HasForeignKey("LocalKey")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("OAK.Model.BusinessModels.DemandModels.Demand", b =>
                {
                    b.HasOne("OAK.Model.Core.Account", "Account")
                        .WithMany("Demands")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OAK.Model.BusinessModels.DemandModels.DemandStatusType", "DemandStatusType")
                        .WithMany()
                        .HasForeignKey("DemandStatusTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OAK.Model.BusinessModels.DemandModels.DemandType", "DemandType")
                        .WithMany()
                        .HasForeignKey("DemandTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OAK.Model.BusinessModels.DemandModels.DemandChat", b =>
                {
                    b.HasOne("OAK.Model.BusinessModels.DemandModels.Demand", "Demand")
                        .WithOne("DemandChat")
                        .HasForeignKey("OAK.Model.BusinessModels.DemandModels.DemandChat", "DemandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OAK.Model.Core.Account", "Account")
                        .WithOne("DemandChat")
                        .HasForeignKey("OAK.Model.BusinessModels.DemandModels.DemandChat", "ToAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OAK.Model.BusinessModels.DemandModels.DemandComment", b =>
                {
                    b.HasOne("OAK.Model.BusinessModels.CommentModels.Comment", "Comment")
                        .WithMany()
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OAK.Model.BusinessModels.DemandModels.Demand", "Demand")
                        .WithMany("DemandComments")
                        .HasForeignKey("DemandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OAK.Model.BusinessModels.DemandModels.DemandOwner", b =>
                {
                    b.HasOne("OAK.Model.BusinessModels.DemandModels.Demand", "Demand")
                        .WithOne("DemandOwner")
                        .HasForeignKey("OAK.Model.BusinessModels.DemandModels.DemandOwner", "DemandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OAK.Model.BusinessModels.DemandModels.DemandStatusType", b =>
                {
                    b.HasOne("OAK.Model.Localization.LocalizationKey", "LocalizationKey")
                        .WithMany()
                        .HasForeignKey("LocalKey")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("OAK.Model.BusinessModels.DemandModels.DemandType", b =>
                {
                    b.HasOne("OAK.Model.Localization.LocalizationKey", "LocalizationKey")
                        .WithMany()
                        .HasForeignKey("LocalKey")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OAK.Model.Core.PropertyJson", "PropertyJson")
                        .WithMany("DemandTypes")
                        .HasForeignKey("PropertyJsonId");
                });

            modelBuilder.Entity("OAK.Model.BusinessModels.DocumentModels.DocumentType", b =>
                {
                    b.HasOne("OAK.Model.Localization.LocalizationKey", "LocalizationKey")
                        .WithMany()
                        .HasForeignKey("LocalKey")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OAK.Model.Core.PropertyJson", "PropertyJson")
                        .WithMany("DocumentTypes")
                        .HasForeignKey("PropertyJsonId");
                });

            modelBuilder.Entity("OAK.Model.BusinessModels.EstateModels.Estate", b =>
                {
                    b.HasOne("OAK.Model.BusinessModels.EstateModels.EstateType", "EstateType")
                        .WithMany()
                        .HasForeignKey("EstateTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OAK.Model.BusinessModels.EstateModels.EstatePart", b =>
                {
                    b.HasOne("OAK.Model.BusinessModels.EstateModels.EstatePartFurniture", null)
                        .WithMany("EstateParts")
                        .HasForeignKey("EstatePartFurnitureId");

                    b.HasOne("OAK.Model.BusinessModels.EstateModels.EstatePartType", "EstatePartType")
                        .WithMany()
                        .HasForeignKey("EstatePartTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OAK.Model.BusinessModels.EstateModels.EstatesFlat", "EstatesFlat")
                        .WithMany("EstateParts")
                        .HasForeignKey("EstatesFlatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OAK.Model.BusinessModels.EstateModels.EstatePartType", b =>
                {
                    b.HasOne("OAK.Model.Localization.LocalizationKey", "LocalizationKey")
                        .WithMany()
                        .HasForeignKey("LocalKey")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OAK.Model.Core.PropertyJson", "PropertyJson")
                        .WithMany("EstatePartTypes")
                        .HasForeignKey("PropertyJsonId");
                });

            modelBuilder.Entity("OAK.Model.BusinessModels.EstateModels.EstateType", b =>
                {
                    b.HasOne("OAK.Model.Localization.LocalizationKey", "LocalizationKey")
                        .WithMany()
                        .HasForeignKey("LocalKey")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OAK.Model.Core.PropertyJson", "PropertyJson")
                        .WithMany("EstateTypes")
                        .HasForeignKey("PropertyJsonId");
                });

            modelBuilder.Entity("OAK.Model.BusinessModels.EstateModels.EstateTypeEPartType", b =>
                {
                    b.HasOne("OAK.Model.BusinessModels.EstateModels.EstatePartType", "EstatePartType")
                        .WithMany()
                        .HasForeignKey("EstatePartTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OAK.Model.BusinessModels.EstateModels.EstateType", "EstateType")
                        .WithMany()
                        .HasForeignKey("EstateTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OAK.Model.BusinessModels.EstateModels.EstatesFlat", b =>
                {
                    b.HasOne("OAK.Model.BusinessModels.EstateModels.Estate", "Estate")
                        .WithMany("Flats")
                        .HasForeignKey("EstateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OAK.Model.BusinessModels.EstateModels.FlatType", "FlatType")
                        .WithMany()
                        .HasForeignKey("FlatTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OAK.Model.BusinessModels.EstateModels.FlatType", b =>
                {
                    b.HasOne("OAK.Model.Localization.LocalizationKey", "LocalizationKey")
                        .WithMany()
                        .HasForeignKey("LocalKey")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OAK.Model.Core.PropertyJson", "PropertyJson")
                        .WithMany()
                        .HasForeignKey("PropertyJsonId");
                });

            modelBuilder.Entity("OAK.Model.BusinessModels.EstateModels.Furniture", b =>
                {
                    b.HasOne("OAK.Model.BusinessModels.EstateModels.EstatePart", "EstatePart")
                        .WithMany("Furnitures")
                        .HasForeignKey("EstatePartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OAK.Model.BusinessModels.EstateModels.FurnitureCalculationType", b =>
                {
                    b.HasOne("OAK.Model.Localization.LocalizationKey", "LocalizationKey")
                        .WithMany()
                        .HasForeignKey("LocalKey")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("OAK.Model.BusinessModels.EstateModels.FurnitureGroupType", b =>
                {
                    b.HasOne("OAK.Model.Localization.LocalizationKey", "LocalizationKey")
                        .WithMany()
                        .HasForeignKey("LocalKey")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("OAK.Model.BusinessModels.EstateModels.FurnitureType", b =>
                {
                    b.HasOne("OAK.Model.BusinessModels.EstateModels.FurnitureCalculationType", "FurnitureCalculationType")
                        .WithMany("FurnitureTypes")
                        .HasForeignKey("FurnitureCalculationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OAK.Model.BusinessModels.EstateModels.FurnitureGroupType", "FurnitureGroupType")
                        .WithMany("FurnitureTypes")
                        .HasForeignKey("FurnitureGroupTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OAK.Model.Localization.LocalizationKey", "LocalizationKey")
                        .WithMany()
                        .HasForeignKey("LocalKey")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OAK.Model.Core.PropertyJson", "PropertyJson")
                        .WithMany("FurnitureTypes")
                        .HasForeignKey("PropertyJsonId");
                });

            modelBuilder.Entity("OAK.Model.BusinessModels.ParameterModels.CurrencyParameters", b =>
                {
                    b.HasOne("OAK.Model.Localization.LocalizationKey", "LocalizationKey")
                        .WithMany()
                        .HasForeignKey("LocalizationKeyKey");

                    b.HasOne("OAK.Model.Core.PropertyJson", "PropertyJson")
                        .WithMany()
                        .HasForeignKey("PropertyJsonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OAK.Model.BusinessModels.ParameterModels.Parameters", b =>
                {
                    b.HasOne("OAK.Model.Localization.LocalizationKey", "LocalizationKey")
                        .WithMany()
                        .HasForeignKey("LocalizationKeyKey");

                    b.HasOne("OAK.Model.Core.PropertyJson", "PropertyJson")
                        .WithMany()
                        .HasForeignKey("PropertyJsonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OAK.Model.BusinessModels.TransportationModels.Transportation", b =>
                {
                    b.HasOne("OAK.Model.BusinessModels.DemandModels.Demand", "Demand")
                        .WithMany()
                        .HasForeignKey("DemandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OAK.Model.BusinessModels.AddressModels.GenericAddress", "FromAddress")
                        .WithMany()
                        .HasForeignKey("FromAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OAK.Model.BusinessModels.EstateModels.Estate", "FromEstate")
                        .WithMany()
                        .HasForeignKey("FromEstateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OAK.Model.BusinessModels.AddressModels.GenericAddress", "ToAddress")
                        .WithMany()
                        .HasForeignKey("ToAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OAK.Model.BusinessModels.EstateModels.Estate", "ToEstate")
                        .WithMany()
                        .HasForeignKey("ToEstateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OAK.Model.BusinessModels.TransportationModels.TransportationComment", b =>
                {
                    b.HasOne("OAK.Model.BusinessModels.CommentModels.Comment", "Comment")
                        .WithMany()
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OAK.Model.BusinessModels.TransportationModels.Transportation", "Demand")
                        .WithMany("TransportationComments")
                        .HasForeignKey("DemandId");
                });

            modelBuilder.Entity("OAK.Model.BusinessModels.TransportationModels.TransportationDocument", b =>
                {
                    b.HasOne("OAK.Model.BusinessModels.DocumentModels.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OAK.Model.BusinessModels.TransportationModels.Transportation", "Transportation")
                        .WithMany("TransportationDocuments")
                        .HasForeignKey("TransportationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OAK.Model.BusinessModels.TransportationModels.TransportationStatusType", b =>
                {
                    b.HasOne("OAK.Model.Localization.LocalizationKey", "LocalizationKey")
                        .WithMany()
                        .HasForeignKey("LocalizationKeyKey");
                });

            modelBuilder.Entity("OAK.Model.BusinessModels.TransportationModels.TransportationType", b =>
                {
                    b.HasOne("OAK.Model.Localization.LocalizationKey", "LocalizationKey")
                        .WithMany()
                        .HasForeignKey("LocalizationKeyKey");

                    b.HasOne("OAK.Model.Core.PropertyJson", "PropertyJson")
                        .WithMany("TransportationTypes")
                        .HasForeignKey("PropertyJsonId");
                });

            modelBuilder.Entity("OAK.Model.Core.Account", b =>
                {
                    b.HasOne("OAK.Model.BusinessModels.CustomerType", "CustomerType")
                        .WithMany("Accounts")
                        .HasForeignKey("CustomerTypeId");
                });

            modelBuilder.Entity("OAK.Model.Core.AccountRole", b =>
                {
                    b.HasOne("OAK.Model.Core.Account", "Account")
                        .WithMany("AccountRoles")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OAK.Model.Core.Role", "Role")
                        .WithMany("AccountRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OAK.Model.Core.CompanyPostCodeData", b =>
                {
                    b.HasOne("OAK.Model.BusinessModels.CompanyModels.Company", "Company")
                        .WithMany("CompanyPostCodeDatas")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OAK.Model.Core.Country", "Country")
                        .WithMany("CompanyPostCodeDatas")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OAK.Model.Core.Country", b =>
                {
                    b.HasOne("OAK.Model.Localization.LocalizationKey", "LocalizationKey")
                        .WithMany()
                        .HasForeignKey("LocalKey")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("OAK.Model.Core.Language", b =>
                {
                    b.HasOne("OAK.Model.Localization.LocalizationKey", "LocalizationKey")
                        .WithMany()
                        .HasForeignKey("LocalizationKeyKey");
                });

            modelBuilder.Entity("OAK.Model.Core.PostCodeData", b =>
                {
                    b.HasOne("OAK.Model.Core.Country", "Country")
                        .WithMany("PostCodes")
                        .HasForeignKey("IsoCountryCode")
                        .HasPrincipalKey("IsoCode2")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OAK.Model.Core.Role", b =>
                {
                    b.HasOne("OAK.Model.Localization.LocalizationKey", "LocalizationKey")
                        .WithMany()
                        .HasForeignKey("LocalKey")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("OAK.Model.Core.SupportedPostCode", b =>
                {
                    b.HasOne("OAK.Model.Core.Country", "Country")
                        .WithMany("SupportedPostCodes")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OAK.Model.Localization.LocalizationText", b =>
                {
                    b.HasOne("OAK.Model.Core.Language", "Language")
                        .WithMany("LocalizationTexts")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OAK.Model.Localization.LocalizationKey", "LocalizationKey")
                        .WithMany("LocalizationTexts")
                        .HasForeignKey("LocalKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
